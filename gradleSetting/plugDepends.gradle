def appPkgName = "cn.likeit.LikeShop"
def repo = "/data/data/$appPkgName/files/repo"

def static getGitVersionCode() {
    return ['sh', '-c', 'git rev-list HEAD | wc -l'].execute().text.trim().toInteger();
}

def static getGitCommitHash() {
    return ['sh', '-c', 'git log --pretty=format:%h -n 1'].execute().text.trim();
}

def getAdbExe() {
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        return "$sdkDir/platform-tools/adb"
    }
    return 'adb'
}

def getAdbDevices() {
    def devices = []

    def adb = getAdbExe()
    def ret = ['sh', '-c', "$adb devices"].execute().text.trim().split("\n")
    def i = 1, s = ret.size()
    for (; i < s; ++i) {
        def line = ret[i];
        def p = line.indexOf("\t")
        if (p != -1) {
            devices << line.substring(0, p)
        }
    }
    return devices
}

def getModuleId(flavorName) {
    def mf = rootDir.path + '/src/';
    if (flavorName.equals('likeit')) {
        mf += 'main'
    } else if (flavorName.equals('mth')) {
        mf += 'mth'
    } else {
        return ''
    }
    mf += '/module.properties'

    def id = ''
    def moduleFile = new File(mf)
    if (moduleFile.canRead()) {
        def Properties p = new Properties();
        p.load(new FileInputStream(moduleFile))
        id = p['MODULE_ID']
    }
    return id
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "25.0.1"

    def versionFile = rootProject.file('version.properties')
    if (versionFile.canRead()) {
        def Properties props = new Properties();
        props.load(new FileInputStream(versionFile))

        def kStorePath = System.getenv("LIKE3_RELEASE_KSPATH")
        def kStorePwd = System.getenv("LIKE3_RELEASE_KSTOREPWD")
        def keyPwd = System.getenv("LIKE3_RELEASE_KEYPWD")
        def vc = getGitVersionCode()
        def vn = props['VERSION_NAME'] + '.' + vc
        def ci = getGitCommitHash();

        defaultConfig {
            minSdkVersion 19
            targetSdkVersion 19
            versionCode vc
            versionName "$vn"
            manifestPlaceholders = [ gitCommitHash:"ci-$ci" ]
        }
        signingConfigs {
            release {
                keyAlias 'like3_release'
                keyPassword "$keyPwd"
                storeFile file("$kStorePath")
                storePassword "$kStorePwd"
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles '../proguard-rules.txt'
                signingConfig signingConfigs.release
            }
        }
        productFlavors {
            likeit {
                buildConfigField "String", "MODULE_ID", "\"${getModuleId('likeit')}\""
            }
//            mth {
//                buildConfigField "String", "MODULE_ID", "\"${getModuleId('mth')}\""
//                applicationIdSuffix '.mth'
//            }
        }
        lintOptions {
            disable 'MissingPrefix', 'OnClick'
        }
        applicationVariants.all { variant ->
            variant.outputs.each { o ->
                if (variant.name.contains('Release')) {
                    def file = o.outputFile
                    def name = file.name.replace('.apk', '-' + defaultConfig.versionName + '-' + ci + '.apk')
                    name = name.replace("-$variant.flavorName", '')
                    name = name.replace(project.name, applicationId)
                    o.outputFile = new File(file.parent, name)

                    task("get${variant.flavorName.capitalize()}ReleaseOutput") {
                        task ->
                            doLast {
                                println applicationId + "-release-" + versionName + '-' + ci + '.apk'
                            }
                    }
                }
                if (variant.name.contains('Debug')) {
                    task ("init${variant.flavorName.capitalize()}DebugPlug") {
                        task ->
                            doLast {
                                def m = task.project.name
                                def dir = getModuleId(variant.flavorName)
                                if (dir == null || ''.equals(dir)) {
                                    return
                                }

                                def filename = "$m-$variant.flavorName-debug.apk"
                                def path = "$project.buildDir.path/outputs/apk/$filename"
                                def apk = new File(path)
                                if (!apk.exists()) {
                                    return
                                }

                                println '=============================='
                                def adb = getAdbExe()
                                def devices = getAdbDevices()
                                for (String d : devices) {
                                    println "mkdir $repo/$dir on $d"
                                    exec {
                                        commandLine "$adb", "-s", d, 'shell', 'mkdir', "$repo/$dir"
                                    }
                                    println "push $filename to $d"
                                    exec {
                                        commandLine "$adb", "-s", d, 'push', "$path", "$repo/$dir/1.apk"
                                    }
                                    println '=============================='
                                }
                            }
                    }
                }
            }
        }
    } else {
        throw new GradleException('Cannot read version.properties')
    }
}

dependencies {
    provided ("org.robobinding:robobinding:0.8.9")
    apt "org.robobinding:codegen:0.8.9"
    provided 'com.android.support:support-v4:19.1.0'
    provided 'com.google.code.gson:gson:2.2.4'
    provided 'com.google.guava:guava:18.0'
    provided 'org.msgpack:msgpack:0.6.12'
    provided 'org.zeromq:jeromq:0.4.0'
    provided 'io.reactivex.rxjava2:rxjava:2.1.0'
    provided files('../LikeLibs/io/reactivex/rxjava2/rxandroid/2.0.1/rxandroid-2.0.1.jar')
    provided files('../LikeLibs/com/jakewharton/rxbinding2/2.0.0/rxbinding-2.0.0.jar')
    provided files('../LikeLibs/iflytek/SpeechApi.jar')
    provided files('../LikeLibs/zmqconn-2.0.3.jar')
    provided files('../LikeLibs/cardclient-1.2.11.jar')
    provided files('../LikeLibs/accounting-1.0.5.jar')
    provided files('../LikeLibs/logger-1.0.5.jar')
    provided files('../LikeLibs/dbclient-1.0.1.jar')
    provided files('../LikeLibs/libPluginManager.jar')
    provided files('../LikeLibs/libLikeShop.jar')
    provided files('../LikeLibs/libBusinessFramework.jar')
    provided files('../LikeLibs/libModuleFramework.jar')

    provided 'com.squareup.okhttp3:okhttp:3.6.0'
    provided files('../LikeLibs/svrconn2-1.0.2.jar')
    provided files('../LikeLibs/svrconn2-apiret-1.0.0.jar')
    provided files('../LikeLibs/svrconn2-support-gson-1.0.0.jar')
}
